#DEVELOPED BY jAAFAR EL BAKKALI, BAHMEDJ@GMAIL.COM, JANUARY 2021, MOROCCO.
#DEPENCIES
#sudo apt-get install python3-joblib
import numpy.random as rndg
from joblib import Parallel, delayed
import multiprocessing
import numpy as np
import datetime
import math 
from scipy.interpolate import CubicSpline
INTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_ISOTOPE_X=1.0
INTERPOLATED_MACROSCOPIC_SIGMA_TOTALE_ISOTOPE_X=1.0
BARN_2_CM2=1e-24 #cm^2
CM2_2_BARN=1e+24 #
i=0
DIRECTION_Z0=1
DIRECTION_X0=0
DIRECTION_Y0=0
EXCUTION_MODE="SEQ"
MEV_2_EV=1.E6
CM_2_M=0.01
EV_2_JOULE = 1.6E-19
NEUTRON_MASS= 1.675E-27#kg
LIGHT_WATER_DENSITY=0.997#g/cm^3
WATER_MOLAR_MASS = 18.010565
AVOGADRO_CONSTANT = 6.02E+23
_1HYDROGEN_ISOTOPE_MASS =1.007825
_16OXYGEN_ISOTOPE_MASS= 15.994915
WATER_MASS_FRACTIONS=(2/3,1/3)
ALIVE=True
NUCLEI_MASS=0.0
COLLIDED_NUCLEI_ID=0
INTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_OXYGEN_16=0.0
INTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_HYDROGEN_1=0.0
NEUTRON_TOTAL_ENERGY=0
NEUTRON_TRACK_LENGTH_TOTAL=0
NEUTRON_TOTAL_SPEED=0.0
NEUTRON_TOTAL_LIFE_TIME=0.0
####################################################################################################
def UPDATE_NEUTRON_POSITIONS_AND_DIRECTIONS():  
 global DIRECTION_Z0,DIRECTION_Y0,DIRECTION_X0, POSITION_X,POSITION_Y,POSITION_Z,DIRECTION_X,DIRECTION_Y,DIRECTION_Z,TRACK_LENGTH, ALIVE, IS_FIRST_TIME_INTERACTED
 if IS_FIRST_TIME_INTERACTED != True:# scattered neutron.
  POSITION_X = POSITION_X + TRACK_LENGTH * DIRECTION_X;
  POSITION_Y = POSITION_Y + TRACK_LENGTH * DIRECTION_Y;
  POSITION_Z = POSITION_Z + TRACK_LENGTH * DIRECTION_Z; 
 elif IS_FIRST_TIME_INTERACTED == True: 
  POSITION_X = 0.0
  POSITION_Y = 0.0
  POSITION_Z =  TRACK_LENGTH           
  DIRECTION_X= DIRECTION_X0
  DIRECTION_Y = DIRECTION_Y0
  DIRECTION_Z = DIRECTION_Z0
 return
####################################################################################################
def UPDATE_KILLED_NEUTRON_STATISTICS():
 global NEUTRON_ENERGY_IN, ECUTOFF,NEUTRONS_KILLED_BY_CUTOFF,ALIVE
 if ALIVE==True and NEUTRON_ENERGY_IN < ECUTOFF:#.
  NEUTRONS_KILLED_BY_CUTOFF= NEUTRONS_KILLED_BY_CUTOFF +1;
 return
####################################################################################################
def UPDATE_INTERACTION_STATISTICS():
 global ALIVE, FIRST_INTERACTION_NUMBER,INTERACTION_NUMBER
 if ALIVE == True :#.
   INTERACTION_NUMBER= INTERACTION_NUMBER +1
 elif ALIVE != True: 
    INTERACTION_NUMBER= INTERACTION_NUMBER +1
 return
####################################################################################################
def UPDATE_FIRST_INTERACTIONS_STATISTICS():
 global ALIVE, FIRST_INTERACTION_NUMBER,INTERACTION_NUMBER,IS_FIRST_TIME_INTERACTED
 if ALIVE == True and IS_FIRST_TIME_INTERACTED == True :#.
   FIRST_INTERACTION_NUMBER= FIRST_INTERACTION_NUMBER +1;
 return
####################################################################################################
def RANDOM_SELECT_COLLIDED_NUCLEUS():
 global Interpol_MacroSigTot_H, INTERPOLATED_TOTAL_MACROSCOPIC_SIGMA_WATER,_1HYDROGEN_ISOTOPE_MASS,NUCLEI_MASS,COLLIDED_NUCLEI_ID,_16OXYGEN_ISOTOPE_MASS,__1HYDROGEN_ISOTOPE_MASS
 random =rndg.uniform(0, 1);
 prob= Interpol_MacroSigTot_H / INTERPOLATED_TOTAL_MACROSCOPIC_SIGMA_WATER;
 if random <= prob:#.
  NUCLEI_MASS = _1HYDROGEN_ISOTOPE_MASS;
  COLLIDED_NUCLEI_ID=0 
  #print("1-H atom was selected ")
 elif random > prob:          
  NUCLEI_MASS =_16OXYGEN_ISOTOPE_MASS;
  COLLIDED_NUCLEI_ID=1
  #print("16-O atom was selected ")
 return
#################################################################################################### 
def FINTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_ISOTOPE_X( ):
 global COLLIDED_NUCLEI_SYMBOL,COLLIDED_NUCLEI_ID, INTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_ISOTOPE_X,INTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_HYDROGEN_1, INTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_OXYGEN_16
 if COLLIDED_NUCLEI_ID == 0:#.
  INTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_ISOTOPE_X = INTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_HYDROGEN_1;
  COLLIDED_NUCLEI_SYMBOL="1-H"
 elif COLLIDED_NUCLEI_ID ==1:         
  INTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_ISOTOPE_X=INTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_OXYGEN_16;
  COLLIDED_NUCLEI_SYMBOL="16-O"
 return
####################################################################################################
def FINTERPOLATED_MACROSCOPIC_SIGMA_TOTALE_ISOTOPE_X( ):
 global COLLIDED_NUCLEI_SYMBOL, COLLIDED_NUCLEI_ID, INTERPOLATED_MACROSCOPIC_SIGMA_TOTALE_ISOTOPE_X,Interpol_MacroSigTot_O, Interpol_MacroSigTot_H
 if COLLIDED_NUCLEI_ID == 0:#.
  INTERPOLATED_MACROSCOPIC_SIGMA_TOTALE_ISOTOPE_X = Interpol_MacroSigTot_H;
  COLLIDED_NUCLEI_SYMBOL="1-H"
 elif COLLIDED_NUCLEI_ID ==1:          
  INTERPOLATED_MACROSCOPIC_SIGMA_TOTALE_ISOTOPE_X=Interpol_MacroSigTot_O;
  COLLIDED_NUCLEI_SYMBOL="16-O"
 return
####################################################################################################
def RANDOM_SELECT_NUCLEAR_REACTION():
 global COLLIDED_NUCLEI_ID,PROCESS, Interpol_SigSCAT_H,INTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_OXYGEN_16,NEUTRON_ENERGY_IN,INTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_HYDROGEN_1,Water_H_Atomic_number,BARN_2_CM2,Interpol_SigSCAT_O,Interpol_MacroSigSCAT_Water,INTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_ISOTOPE_X, INTERACTION_NUMBER,TOTAL_CAPTURE_NUMBER,ALIVE,NEUTRON_MASS,CONSTANT_B,CONSTANT_C
 random =rndg.uniform(0, 1);
 Interpol_SigSCAT_H=CUBIC_SPLINE_H_SIGMA_SCATTERING(NEUTRON_ENERGY_IN)
#print(Interpol_SigTot_H)
 INTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_HYDROGEN_1= Interpol_SigSCAT_H*Water_H_Atomic_number*BARN_2_CM2
 Interpol_SigSCAT_O=CUBIC_SPLINE_O_SIGMA_SCATTERING(NEUTRON_ENERGY_IN)
#print(Interpol_SigTot_O);
 INTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_OXYGEN_16= Interpol_SigSCAT_O *Water_O_Atomic_number*BARN_2_CM2;
 Interpol_MacroSigSCAT_Water=INTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_HYDROGEN_1+INTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_OXYGEN_16;
 prob=0.0
 FINTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_ISOTOPE_X();
 FINTERPOLATED_MACROSCOPIC_SIGMA_TOTALE_ISOTOPE_X();
 prob= INTERPOLATED_MACROSCOPIC_SIGMA_SCATTERING_ISOTOPE_X / INTERPOLATED_MACROSCOPIC_SIGMA_TOTALE_ISOTOPE_X;
 if random <= prob:
  SAMPLE_NEUTRON_SCATTERING_DIRECTIONS();
  PROCESS="Scattering"
  ALIVE =True;
 elif random > prob:          
  INTERACTION_NUMBER=INTERACTION_NUMBER+1
  TOTAL_CAPTURE_NUMBER=TOTAL_CAPTURE_NUMBER+1
  PROCESS="Capture"
  #print("neutron is captured at energy: ", NEUTRON_ENERGY_IN)
  ALIVE =False;
  return
##############################################################################################
def UPDATE_NEUTRON_DIRECTION():
 global CONSTANT_C, CONSTANT_B,MU_LABORATORY_SYSTEM,COSINUS_PHI,SINUS_PHI,up,vp,wp,DIRECTION_X,DIRECTION_Y,DIRECTION_Z
 if DIRECTION_Z < 1.0: #.
  up = MU_LABORATORY_SYSTEM * DIRECTION_X+ CONSTANT_B * (DIRECTION_X* DIRECTION_Z * COSINUS_PHI - DIRECTION_Y * SINUS_PHI) / CONSTANT_C;
  vp = MU_LABORATORY_SYSTEM * DIRECTION_Y + CONSTANT_B * (DIRECTION_Y * DIRECTION_Z * COSINUS_PHI + DIRECTION_X* SINUS_PHI) / CONSTANT_C;
  wp = MU_LABORATORY_SYSTEM * DIRECTION_Z - CONSTANT_B * CONSTANT_C * COSINUS_PHI;
 elif DIRECTION_Z == 1:          
  CONSTANT_C = math.sqrt(1. - DIRECTION_Y *DIRECTION_Y);
  up = MU_LABORATORY_SYSTEM * DIRECTION_X+ CONSTANT_B * (DIRECTION_X* DIRECTION_Y * COSINUS_PHI - DIRECTION_Z * SINUS_PHI) / CONSTANT_C;
  vp = MU_LABORATORY_SYSTEM * DIRECTION_Y - CONSTANT_B * CONSTANT_C * COSINUS_PHI;
  wp = MU_LABORATORY_SYSTEM * DIRECTION_Z + CONSTANT_B * (DIRECTION_Y * DIRECTION_Z * COSINUS_PHI - DIRECTION_X* SINUS_PHI) / CONSTANT_C; 
  DIRECTION_X=up
  DIRECTION_Y=vp
  DIRECTION_Z=wp
  return
####################################################################################################
def SAMPLE_NEUTRON_SCATTERING_DIRECTIONS():
 global NEUTRON_TOTAL_ENERGY,DIRECTION_X,DIRECTION_Y,DIRECTION_Z,up,vp,wp, NeutronSpeed,NEUTRON_MASS,CONSTANT_B,CONSTANT_C,CONSTANT_A,MU_LABORATORY_SYSTEM,COSINUS_PHI,SINUS_PHI, NEUTRON_TOTAL_SPEED,NEUTRON_TRACK_LENGTH_TOTAL,NEUTRON_TOTAL_LIFE_TIME,NEUTRON_ENERGY_IN,DIRECTION_Z,NUCLEI_MASS
 PHI = 2. * math.pi * rndg.uniform(0, 1)
 COSINUS_PHI = math.cos(PHI)
 SINUS_PHI = math.sin(PHI)
 Mu_CENTER_MASS_SYSTEM = 2. * rndg.uniform(0, 1) - 1.0
 CONSTANT_A = NUCLEI_MASS * NUCLEI_MASS + 2. * NUCLEI_MASS * Mu_CENTER_MASS_SYSTEM + 1.
 MU_LABORATORY_SYSTEM = (1. + NUCLEI_MASS * Mu_CENTER_MASS_SYSTEM) / math.sqrt(CONSTANT_A)
 sin_theta_LAB = math.sin(math.acos(MU_LABORATORY_SYSTEM));
 NEUTRON_TOTAL_ENERGY = NEUTRON_TOTAL_ENERGY + NEUTRON_ENERGY_IN;
 NeutronSpeed = math.sqrt(2. * NEUTRON_ENERGY_IN * EV_2_JOULE / NEUTRON_MASS);
 NEUTRON_TOTAL_SPEED = NEUTRON_TOTAL_SPEED + NeutronSpeed;
 NEUTRON_TRACK_LENGTH_TOTAL = NEUTRON_TRACK_LENGTH_TOTAL + TRACK_LENGTH;
 NEUTRON_TOTAL_LIFE_TIME = NEUTRON_TOTAL_LIFE_TIME + TRACK_LENGTH * CM_2_M / NeutronSpeed;
 NEUTRON_ENERGY_IN = NEUTRON_ENERGY_IN * CONSTANT_A / (1. + NUCLEI_MASS) / (1. + NUCLEI_MASS);
 CONSTANT_B = math.sqrt(1. - MU_LABORATORY_SYSTEM * MU_LABORATORY_SYSTEM);
 CONSTANT_C = math.sqrt(1. - DIRECTION_Z * DIRECTION_Z);
 UPDATE_NEUTRON_DIRECTION();
 UPDATE_INTERACTION_STATISTICS( );
 ALIVE=True
 return
####################################################################################################
def PRINT_STEP_DETAILS(STEP_ID,X,Y,Z,DIRECTION_X,DIRECTION_Y,DIRECTION_Z,KINETIC_ENERGY, STEP_LENGTH,COLLIDED_NUCLEI_SYMBOL,PROCESS):
 VALUES='{:3d} {:.3f} {:.3f} {:.3f} {:.3f} {:.3f} {:.3f} {:.3f} {:.3f} {:6s} {:6s}'.format(STEP_ID, X*10,Y*10, 10*Z,DIRECTION_X,DIRECTION_Y,DIRECTION_Z,KINETIC_ENERGY, STEP_LENGTH,COLLIDED_NUCLEI_SYMBOL,PROCESS)
 print('Step.ID'.ljust(7), 'X(mm)'.ljust(7), 'Y(mm)'.ljust(7), 'Z(mm)'.ljust(7),'DIR.X'.ljust(7), 'DIR.Y'.ljust(7), 'DIR.Z'.ljust(7), 'K.E(eV)'.ljust(7), 'Step.L(cm)'.ljust(7),'Isotope'.ljust(7),'Process'.ljust(7), '\n',VALUES )
 return
####################################################################################################
def TRACK_SINGLE_NEUTRON(i):
 global ALIVE,j,up,vp,wp,PROCESS,COLLIDED_NUCLEI_SYMBOL,NEUTRONS_KILLED_BY_CUTOFF,NEUTRON_TOTAL_LIFE_TIME,NEUTRON_TOTAL_SPEED,NEUTRON_TOTAL_ENERGY,NEUTRON_TRACK_LENGTH_TOTAL,INTERACTION_NUMBER,TOTAL_CAPTURE_NUMBER,FIRST_INTERACTION_NUMBER,INTERACTION_NUMBER,NEUTRON_ENERGY_IN,TOTAL_INTERACTION_NUMBER ,IncidentNeutronEnergy,POSITION_X,INTERPOLATED_TOTAL_MACROSCOPIC_SIGMA_WATER,Interpol_MacroSigTot_H,Interpol_MacroSigTot_O, POSITION_Y,POSITION_Z,DIRECTION_X,DIRECTION_Y,DIRECTION_Z,TRACK_LENGTH,IS_FIRST_TIME_INTERACTED,VERBOSITY,ALIVE,BARN_2_CM2,Water_H_Atomic_number,Water_O_Atomic_number,ECUTOFF
 j=-1
 INTERACTION_NUMBER = 0;
 TOTAL_CAPTURE_NUMBER = 0
 PROCESS="Transportation"
 TOTAL_INTERACTION_NUMBER=0
 FIRST_INTERACTION_NUMBER=0
 NEUTRONS_KILLED_BY_CUTOFF=0
 NEUTRON_TOTAL_ENERGY=0
 NEUTRON_TRACK_LENGTH_TOTAL=0
 NEUTRON_TOTAL_LIFE_TIME=0
 NEUTRON_TOTAL_SPEED=0
 NEUTRON_ENERGY_IN = IncidentNeutronEnergy;
 COLLIDED_NUCLEI_SYMBOL="None"
 POSITION_X = 0.0
 POSITION_Y = 0.0
 POSITION_Z = 0.0           
 DIRECTION_X= 0.0
 DIRECTION_Y = 0.0
 DIRECTION_Z = DIRECTION_Z0
 TRACK_LENGTH=0.0
 IS_FIRST_TIME_INTERACTED=True
 ALIVE=True
 if VERBOSITY==1: print("==========BEGIN OF EVENT#",i,"# IN CPU:", multiprocessing.current_process().name) 
#loop until incident neutron energy becomes small than cutoff energy.
 if VERBOSITY==1: PRINT_STEP_DETAILS(j,POSITION_X,POSITION_Y,POSITION_Z,DIRECTION_X,DIRECTION_Y,DIRECTION_Z,NEUTRON_ENERGY_IN,TRACK_LENGTH,COLLIDED_NUCLEI_SYMBOL,PROCESS)  
 while ALIVE==True:
    j = j +1 
    #if VERBOSITY==1: print("Step id : ",j)
    Interpol_SigTot_H=CUBIC_SPLINE_H_SIGMA_TOTAL(NEUTRON_ENERGY_IN) 
    #print(Interpol_SigTot_H)
    Interpol_MacroSigTot_H= Interpol_SigTot_H*Water_H_Atomic_number*BARN_2_CM2
    Interpol_SigTot_O=CUBIC_SPLINE_O_SIGMA_TOTAL(NEUTRON_ENERGY_IN)
    #print(Interpol_SigTot_O);
    Interpol_MacroSigTot_O= Interpol_SigTot_O *Water_O_Atomic_number*BARN_2_CM2;
    INTERPOLATED_TOTAL_MACROSCOPIC_SIGMA_WATER=(Interpol_MacroSigTot_H+Interpol_MacroSigTot_O);
    #print("TOtal Macroscopic Sigma for water (m-1) ",INTERPOLATED_TOTAL_MACROSCOPIC_SIGMA_WATER," for neutron incident energy(MeV):",NEUTRON_ENERGY_IN/1.0e6);
    #print("TOtal Mean free path for water (m-1) ",1.0/INTERPOLATED_TOTAL_MACROSCOPIC_SIGMA_WATER," for neutron incident energy:",NEUTRON_ENERGY_IN);
    TRACK_LENGTH =-np.log( rndg.uniform(0, 1)) /INTERPOLATED_TOTAL_MACROSCOPIC_SIGMA_WATER;
    #if VERBOSITY==1: print("TRACK_LENGTH (cm) ",TRACK_LENGTH);
    UPDATE_NEUTRON_POSITIONS_AND_DIRECTIONS();
    RANDOM_SELECT_COLLIDED_NUCLEUS();  
    RANDOM_SELECT_NUCLEAR_REACTION();
    UPDATE_KILLED_NEUTRON_STATISTICS();
    UPDATE_FIRST_INTERACTIONS_STATISTICS()
    IS_FIRST_TIME_INTERACTED=False
    #print("ALIVE: ", ALIVE)
    if VERBOSITY==1: PRINT_STEP_DETAILS(j,POSITION_X,POSITION_Y,POSITION_Z,DIRECTION_X,DIRECTION_Y,DIRECTION_Z,NEUTRON_ENERGY_IN,TRACK_LENGTH,COLLIDED_NUCLEI_SYMBOL,PROCESS)  
    if NEUTRON_ENERGY_IN < ECUTOFF: ALIVE=False
 TOTAL_INTERACTION_NUMBER = TOTAL_INTERACTION_NUMBER + INTERACTION_NUMBER;
 if VERBOSITY==1: print("==========END OF EVENT#",i,"TOTAL NUMBER OF STEPS: ",j+1)  
 return TOTAL_INTERACTION_NUMBER,FIRST_INTERACTION_NUMBER,NEUTRON_TOTAL_ENERGY,TOTAL_CAPTURE_NUMBER,NEUTRONS_KILLED_BY_CUTOFF,NEUTRON_TOTAL_LIFE_TIME,NEUTRON_TOTAL_SPEED,NEUTRON_TRACK_LENGTH_TOTAL
####################################################################################################
NEUTRON_TOTAL_ENERGY_MERG=0
FIRST_INTERACTION_NUMBER_MERG=0
TOTAL_INTERACTION_NUMBER_MERG=0
TOTAL_CAPTURE_NUMBER_MERG=0
NEUTRONS_KILLED_BY_CUTOFF_MERG=0
NEUTRON_TOTAL_LIFE_TIME_MERG=0.0
NEUTRON_TOTAL_SPEED_MERG=0.0
NEUTRON_TRACK_LENGTH_TOTAL_MERG=0.0
print("=== iPy-SNuS Monte Carlo neutronique code.")
import Charge_Neutron_CrossSection as rsd
import concurrent.futures
Water_molecular_number_density = LIGHT_WATER_DENSITY * AVOGADRO_CONSTANT / WATER_MOLAR_MASS
Water_H_Atomic_number= Water_molecular_number_density * WATER_MASS_FRACTIONS[0]
Water_O_Atomic_number= Water_molecular_number_density * WATER_MASS_FRACTIONS[1]
print("=== 1-H mass fraction in light water: ",WATER_MASS_FRACTIONS[0])
print("=== 16-O mass fraction in light water: ",WATER_MASS_FRACTIONS[1])
print("=== Molecular number density of water:(molecules/cm^3) : ",Water_molecular_number_density)
print("=== Atomic number density of Hydrogen in water:(atomes/cm^3) : ",Water_H_Atomic_number)
print("=== Atomic number density of Oxygen in water:(atomes/cm^3) : ",Water_O_Atomic_number)
print("=== Molecular number density of water:(molecules/barn-cm) : ",Water_molecular_number_density/CM2_2_BARN)
print("=== Atomic number density of Hydrogen in water:(atomes/barn-cm) : ",Water_H_Atomic_number/CM2_2_BARN)
print("=== Atomic number density of Oxygen in water:(atomes/barn-cm) : ",Water_O_Atomic_number/CM2_2_BARN)
TOTAL_MACROSCOPIC_SIGMA_OF_WATER = 0.0
TOTAL_INTERACTION_NUMBER = 0
INTERACTION_NUMBER=0
TOTAL_CAPTURE_NUMBER = 0
FIRST_INTERACTION_NUMBER = 0
NEUTRONS_KILLED_BY_CUTOFF = 0.0
NEUTRON_TOTAL_LIFE_TIME = 0
NEUTRON_TOTAL_SPEED = 0.0
NEUTRON_TRACK_LENGTH_TOTAL = 0.0 
NEUTRON_TOTAL_LIFE_TIME=0.0
NEUTRON_TOTAL_SPEED=0.0
NEUTRON_TOTAL_ENERGY=0.0
VERBOSITY=1
n=0
ECUTOFF=1# ev.
TOTAL_MACROSCOPIC_SIGMA_OF_WATER=0.0
NEUTRON_HISTORIES=100
IncidentNeutronEnergy=2*MEV_2_EV
CUBIC_SPLINE_H_SIGMA_TOTAL = CubicSpline(rsd.Energy_H, rsd.Sigma_Total_H)
CUBIC_SPLINE_O_SIGMA_TOTAL = CubicSpline(rsd.Energy_O, rsd.Sigma_Total_O)
CUBIC_SPLINE_H_SIGMA_SCATTERING = CubicSpline(rsd.Energy_H, rsd.Sigma_Elastic_H)
CUBIC_SPLINE_O_SIGMA_SCATTERING = CubicSpline(rsd.Energy_O, rsd.Sigma_Elastic_O)
print("=== Neutron histories: ", NEUTRON_HISTORIES)
print("=== Selected incident neutron energy (MeV): ", IncidentNeutronEnergy/1E6);
START_TIME = datetime.datetime.now()
if  (EXCUTION_MODE=="SEQ"):
 for i in range(NEUTRON_HISTORIES): 
  outputs =TRACK_SINGLE_NEUTRON (i)
  TOTAL_INTERACTION_NUMBER_MERG=TOTAL_INTERACTION_NUMBER_MERG +outputs[0]
  FIRST_INTERACTION_NUMBER_MERG=FIRST_INTERACTION_NUMBER_MERG +outputs[1]
  NEUTRON_TOTAL_ENERGY_MERG=NEUTRON_TOTAL_ENERGY_MERG +outputs[2]
  TOTAL_CAPTURE_NUMBER_MERG=TOTAL_CAPTURE_NUMBER_MERG +outputs[3]
  NEUTRONS_KILLED_BY_CUTOFF_MERG=NEUTRONS_KILLED_BY_CUTOFF_MERG +outputs[4]
  NEUTRON_TOTAL_LIFE_TIME_MERG=NEUTRON_TOTAL_LIFE_TIME_MERG +outputs[5]
  NEUTRON_TOTAL_SPEED_MERG= NEUTRON_TOTAL_SPEED_MERG+ outputs[6]
  NEUTRON_TRACK_LENGTH_TOTAL_MERG= NEUTRON_TRACK_LENGTH_TOTAL_MERG+outputs[7]
if (EXCUTION_MODE=="PARA"):
 executor = concurrent.futures.ProcessPoolExecutor() 
 with concurrent.futures.ProcessPoolExecutor() as executor:
  results = [executor.submit(TRACK_SINGLE_NEUTRON, i) for i in range(NEUTRON_HISTORIES)]
  for f in concurrent.futures.as_completed(results):
   outputs = f.result()
   TOTAL_INTERACTION_NUMBER_MERG=TOTAL_INTERACTION_NUMBER_MERG +outputs[0]
   FIRST_INTERACTION_NUMBER_MERG=FIRST_INTERACTION_NUMBER_MERG +outputs[1]
   NEUTRON_TOTAL_ENERGY_MERG=NEUTRON_TOTAL_ENERGY_MERG +outputs[2]
   TOTAL_CAPTURE_NUMBER_MERG=TOTAL_CAPTURE_NUMBER_MERG +outputs[3]
   NEUTRONS_KILLED_BY_CUTOFF_MERG=NEUTRONS_KILLED_BY_CUTOFF_MERG +outputs[4]
   NEUTRON_TOTAL_LIFE_TIME_MERG=NEUTRON_TOTAL_LIFE_TIME_MERG +outputs[5]
   NEUTRON_TOTAL_SPEED_MERG= NEUTRON_TOTAL_SPEED_MERG+ outputs[6]
   NEUTRON_TRACK_LENGTH_TOTAL_MERG= NEUTRON_TRACK_LENGTH_TOTAL_MERG+outputs[7]
END_TIME = datetime.datetime.now()
EXECUTION_TIME = END_TIME - START_TIME
num_cores = multiprocessing.cpu_count()
print("=== Number of CPU cores: " , num_cores)    
print("=== Number of histories: " , NEUTRON_HISTORIES)    
print("=== Neutron kinetic energy (MeV): ", IncidentNeutronEnergy/1e6)
print("=== First Collision Number:", FIRST_INTERACTION_NUMBER_MERG)
print("=== Number of interactions:", TOTAL_INTERACTION_NUMBER_MERG)
print("=== Number of capture events:", TOTAL_CAPTURE_NUMBER_MERG)
print("=== Average interaction number: ", TOTAL_INTERACTION_NUMBER_MERG /NEUTRON_HISTORIES)
print("=== Capture Fraction (%):", TOTAL_CAPTURE_NUMBER_MERG * 100.00 /NEUTRON_HISTORIES)
print("=== Killed Cutoff (%): ", NEUTRONS_KILLED_BY_CUTOFF_MERG * 100.00 /NEUTRON_HISTORIES)
print("=== Neutrons killed by Energy Cutoff:",NEUTRONS_KILLED_BY_CUTOFF_MERG)
print("=== Total neutron energy  (MeV):", NEUTRON_TOTAL_ENERGY_MERG / MEV_2_EV, " MeV")
print("=== Average neutron energy (MeV):", NEUTRON_TOTAL_ENERGY_MERG / TOTAL_INTERACTION_NUMBER_MERG /MEV_2_EV)
print("=== Neutron mean life time (s):  ", NEUTRON_TOTAL_LIFE_TIME_MERG / FIRST_INTERACTION_NUMBER_MERG)
print("=== Average neutron speed (m/s):", NEUTRON_TOTAL_SPEED_MERG / TOTAL_INTERACTION_NUMBER_MERG )
print("=== Average neutron track length (cm): ", NEUTRON_TRACK_LENGTH_TOTAL_MERG /FIRST_INTERACTION_NUMBER_MERG)
print("=== Neutron total track length (cm): ", NEUTRON_TRACK_LENGTH_TOTAL_MERG)
print("=== Simulation execution time (seconds): ", EXECUTION_TIME.total_seconds())


